# 그리디 알고리즘(탐욕법)
# - 현재 상황에서 지금 당장 좋은 것만 고르는 방법을 의미
# - 일반적인 그리디 알고리즘은 문제를 풀기 위한 최소한의 아이디어를 떠올릴 수 있는 능력을 요구
# - 그리디 해법은 정당성 분석이 중요하며, 단순히 가장 좋아 보이는 것을 반복적으로 선택해도 최적의 해를 구할 수 있는지 검토
# - 일반적인 상황에서 그리디 알고리즘은 최적의 해를 보장할 수 없을 때가 많음
# - 대부분의 그리디 문제는 탐욕법으로 얻은 해가 최적의 해가 되는 상황에서, 이를 추론할 수 있어야 풀리도록 출제


# 0) 거스름돈 문제
# 그리디의 가장 대표적인 예는 거스름돈 문제로, 동전은 큰 단위가 항상 작은 단위의 배수이므로 작은 단위의 동전들을 종합해 다른 해가 나올 수 없기 때문에 그리디에 적합
n = 1260
count = 0

array = [500, 100, 50, 10] # 큰 단위의 화폐부터 차례대로

for coin in array:
  count += n // coin # 해당 화폐로 거슬러 줄 수 있는 동전의 개수 세기
  n %= coin # %= 왼쪽 변수에서 오른쪽 값을 나눈 나머지의 결과를 왼쪽 변수에 할당

print(count)
# 화폐의 종류가 K라고 할 때, 소스코드의 시간 복잡도는 O(K)이며, 이 알고리즘의 시간 복잡도는 거슬러줘야 하는 금액과는 무관하고 동전의 총 종류에만 영향을 받음

# 1) 1이 될 때까지
